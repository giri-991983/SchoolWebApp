  @using SchoolWebApp.Models
@{
    var selectedID = ViewBag.SelectedIds as IEnumerable<int> ?? new List<int>();
var boardingTypes = ViewBag.Items as List<BoardingTypes>; // Use dynamic to handle anonymous type}
}
@foreach (var item in boardingTypes ?? new List<BoardingTypes>())
{
    var isSelected = selectedID.Contains(item.BoardingTypeID);
   
    <option value="@item.BoardingTypeID" @(isSelected ? "selected=\"selected\"" : "")>@item.BoardingType</option>

}  
@* @using SchoolWebApp.Models
@{
    var selectedID = ViewBag.SelectedIds as IEnumerable<int> ?? new List<int>();
    var boardingTypes = ViewBag.Items as List<BoardingTypes> ?? new List<BoardingTypes>();
    var renderMode = ViewBag.RenderMode as string ?? "options";
    var campusId = ViewBag.CampusID as string; // Optional CampusID for Edit form
}

<p>Debug: Selected IDs in BoardingTypes.cshtml: @(selectedID != null && selectedID.Any() ? string.Join(", ", selectedID) : "None")</p>
<p>Debug: Boarding Types: @(boardingTypes != null && boardingTypes.Any() ? string.Join(", ", boardingTypes.Select(bt => $"{bt.BoardingTypeID}:{bt.BoardingType}")) : "None")</p>

@if (boardingTypes.Any())
{
    if (renderMode.ToLower() == "checkboxes")
    {
        // Render checkboxes for the Create or Edit form
        foreach (var item in boardingTypes)
        {
            var isSelected = selectedID.Contains(item.BoardingTypeID);
            <p>Debug: Checkbox ID: @item.BoardingTypeID, Should be checked: @isSelected</p>
            <li>
                <div class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input boarding-type-checkbox" type="checkbox"
                               value="@item.BoardingTypeID"
                               id="boardingType_@item.BoardingTypeID"
                        @(campusId != null ? $"data-campus-id=\"{campusId}\"" : "")
                        @(isSelected ? "checked" : "") />
                        <label class="form-check-label" for="boardingType_@item.BoardingTypeID">
                            @item.BoardingType
                        </label>
                    </div>
                </div>
            </li>
        }
    }
    else
    {
        // Render <option> elements (unchanged)
        foreach (var item in boardingTypes)
        {
            var isSelected = selectedID.Contains(item.BoardingTypeID);
            <p>Debug: Option ID: @item.BoardingTypeID, Should be selected: @isSelected</p>
            <option value="@item.BoardingTypeID" @(isSelected ? "selected=\"selected\"" : "")>@item.BoardingType</option>
        }
    }
}
else
{
    if (renderMode.ToLower() == "checkboxes")
    {
        <li><div class="dropdown-item">No boarding types available</div></li>
    }
    else
    {
        <option value="">No boarding types available</option>
    }
} *@