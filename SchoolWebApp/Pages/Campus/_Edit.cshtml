@model SchoolWebApp.Pages.Campus.IndexModel

<div class="offcanvas-body mx-0 flex-grow-0">
    <form id="editCampusForm_@Model.Campus.CampusID" method="post" enctype="multipart/form-data" data-id="@Model.Campus.CampusID" >
        @Html.AntiForgeryToken()
        <input type="hidden" name="Campus.CampusID" value="@Model.Campus.CampusID" />
        <input type="hidden" name="Campus.CGUID" value="@Model.Campus.CGUID" />
        <input type="hidden" name="Campus.CreatedDate" value="@Model.Campus.CreatedDate" />
        <input type="hidden" name="Campus.Status" value="@Model.Campus.Status" />

        <!-- InstitutionID Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            <select name="Campus.InstitutionID" id="editInstitutionID_@Model.Campus.CampusID" class="form-control" onchange="loadZones(this.value, @Model.Campus.CampusID)">
                @* <option value="">Select an Institution</option> *@
                @await Component.InvokeAsync("Master", new { viewname = "Institutions", SelectedIDs = Model.Campus.InstitutionID })
            </select>
            <label for="editInstitutionID_@Model.Campus.CampusID">Institution</label>
           
        </div>

        <!-- ZoneID Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            <select name="Campus.ZoneID" id="editZoneID_@Model.Campus.CampusID" class="form-control">
               @*  <option value="">Select a Zone</option> *@
                @if (Model.Campus.InstitutionID != 0)
                {
                    @await Component.InvokeAsync("Master", new { viewname = "Zones", FilterIds = Model.Campus.InstitutionID.ToString(), SelectedIDs = Model.Campus.ZoneID })
                }
            </select>
            <label for="editZoneID_@Model.Campus.CampusID">Zone</label>
           
        </div>

        <!-- CampusName -->
        <div class="form-floating form-floating-outline mb-5">
            <input type="text" name="Campus.CampuseName" id="editCampusName_@Model.Campus.CampusID" class="form-control" value="@Model.Campus.CampuseName" autocomplete="off" />
            <label for="editCampusName_@Model.Campus.CampusID">Campus Name</label>
            
        </div>

        <!-- AffiliationNo -->
        <div class="form-floating form-floating-outline mb-5">
            <input type="text" name="Campus.AffiliationNo" id="editAffiliationNo_@Model.Campus.CampusID" class="form-control" value="@Model.Campus.AffiliationNo" autocomplete="off" />
            <label for="editAffiliationNo_@Model.Campus.CampusID">Affiliation No</label>
            
        </div>

        <!-- SchoolCode -->
        <div class="form-floating form-floating-outline mb-5">
            <input type="text" name="Campus.SchoolCode" id="editSchoolCode_@Model.Campus.CampusID" class="form-control" value="@Model.Campus.SchoolCode" autocomplete="off" />
            <label for="editSchoolCode_@Model.Campus.CampusID">School Code</label>
            
        </div>

        <!-- CampusTypeID Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            <select name="Campus.CampusTypeID" id="editCampusTypeID_@Model.Campus.CampusID" class="form-control">
              @*   <option value="">Select a Campus Type</option> *@
                @await Component.InvokeAsync("Master", new { viewname = "CampusTypes", SelectedIDs = Model.Campus.CampusTypeID })
            </select>
            <label for="editCampusTypeID_@Model.Campus.CampusID">Campus Type</label>
            
        </div>

        <!-- PhoneNos -->
        <div class="form-floating form-floating-outline mb-5">
            <input type="text" name="Campus.PhoneNos" id="editPhoneNos_@Model.Campus.CampusID" class="form-control" value="@Model.Campus.PhoneNos" autocomplete="off" />
            <label for="editPhoneNos_@Model.Campus.CampusID">Phone Numbers</label>
           
        </div>

        <!-- Address -->
        <div class="form-floating form-floating-outline mb-5">
            <textarea name="Campus.Address" id="editAddress_@Model.Campus.CampusID" class="form-control" style="height: 100px;">@Model.Campus.Address</textarea>
            <label for="editAddress_@Model.Campus.CampusID">Address</label>
           
        </div>

        <!-- Locality -->
        <div class="form-floating form-floating-outline mb-5">
            <input type="text" name="Campus.Locality" id="editLocality_@Model.Campus.CampusID" class="form-control" value="@Model.Campus.Locality" autocomplete="off" />
            <label for="editLocality_@Model.Campus.CampusID">Locality</label>
            <span class="text-danger" data-fv-for="Campus.Locality"></span>
        </div>

      
        <!-- CountryID Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            <select name="Campus.CountryID" id="editCountryID_@Model.Campus.CampusID" class="form-control" onchange="loadStates(this.value, @Model.Campus.CampusID)">
                @* <option value="">Select a Country</option> *@
                @await Component.InvokeAsync("Master", new { viewname = "Countries", SelectedIDs = Model.Campus.CountryID })
            </select>
            <label for="editCountryID_@Model.Campus.CampusID">Country</label>
            
        </div>

        <!-- StateID Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            <select name="Campus.StateID" id="editStateID_@Model.Campus.CampusID" class="form-control" onchange="loadCities(this.value, @Model.Campus.CampusID)">
                @* <option value="">Select a State</option> *@
                @if (Model.Campus.CountryID != 0)
                {
                    @await Component.InvokeAsync("Master", new { viewname = "States", FilterIds = Model.Campus.CountryID.ToString(), SelectedIDs = Model.Campus.StateID })
                }
            </select>
            <label for="editStateID_@Model.Campus.CampusID">State</label>
           
        </div>

        <!-- CityID Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            <select name="Campus.CityID" id="editCityID_@Model.Campus.CampusID" class="form-control">
                @* <option value="">Select a City</option> *@
                @if (Model.Campus.StateID != 0)
                {
                    var filterIds = $"{Model.Campus.CountryID},{Model.Campus.StateID}";
                    @await Component.InvokeAsync("Master", new { viewname = "Cities", FilterIds = filterIds, SelectedIDs = Model.Campus.CityID })
                }
            </select>
            <label for="editCityID_@Model.Campus.CampusID">City</label>
           
        </div>
        <!-- PinCode -->
        <div class="form-floating form-floating-outline mb-5">
            <input type="text" name="Campus.PinCode" id="editPinCode_@Model.Campus.CampusID" class="form-control" value="@Model.Campus.PinCode" autocomplete="off" />
            <label for="editPinCode_@Model.Campus.CampusID">Pin Code</label>

        </div>


        <!-- Buttons -->
        <div class="row">
            <div class="col-12">
                <button type="submit" class="btn btn-primary me-3" data-id="@Model.Campus.CampusID">Save</button>
                <button type="reset" class="btn btn-outline-secondary" data-bs-dismiss="offcanvas">Cancel</button>
            </div>
        </div>
    </form>
</div>

@*  @model SchoolWebApp.Pages.Campus.IndexModel

<div class="offcanvas offcanvas-end" tabindex="-1" id="editCampusOffcanvas" aria-labelledby="editCampusOffcanvasLabel">
    <div class="offcanvas-header border-bottom">
        <h5 class="offcanvas-title" id="editCampusOffcanvasLabel">Edit Campus Details</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body mx-0 flex-grow-0">
        <form id="editCampusForm_@Model.Campus.CampusID" method="post" enctype="multipart/form-data" data-id="@Model.Campus.CampusID" onsubmit="return false;">
            @Html.AntiForgeryToken()
            <input type="hidden" name="Campus.CampusID" value="@Model.Campus.CampusID" />
            <input type="hidden" name="Campus.CGUID" value="@Model.Campus.CGUID" />
            <input type="hidden" name="Campus.CreatedDate" value="@Model.Campus.CreatedDate" />
            <input type="hidden" name="Campus.Status" value="@Model.Campus.Status" />

            <!-- InstitutionID Dropdown -->
            <div class="form-floating form-floating-outline mb-5">
                <select name="Campus.InstitutionID" id="editInstitutionID_@Model.Campus.CampusID" class="form-select">
                    <option value="">Select an Institution</option>
                    @await Component.InvokeAsync("Master", new { viewname = "Institutions", SelectedIDs = Model.Campus.InstitutionID })
                </select>
                <label for="editInstitutionID_@Model.Campus.CampusID">Institution</label>
                <span class="text-danger" data-fv-for="Campus.InstitutionID"></span>
            </div>

            <!-- ZoneID Dropdown -->
            <div class="form-floating form-floating-outline mb-5">
                <select name="Campus.ZoneID" id="editZoneID_@Model.Campus.CampusID" class="form-select">
                    <option value="">Select a Zone</option>
                    @if (Model.Campus.InstitutionID != 0)
                    {
                        @await Component.InvokeAsync("Master", new { viewname = "Zones", FilterIds = Model.Campus.InstitutionID.ToString(), SelectedIDs = Model.Campus.ZoneID })
                    }
                </select>
                <label for="editZoneID_@Model.Campus.CampusID">Zone</label>
                <span class="text-danger" data-fv-for="Campus.ZoneID"></span>
            </div>

            <!-- CampusName -->
            <div class="form-floating form-floating-outline mb-5">
                <input type="text" name="Campus.CampuseName" id="editCampusName_@Model.Campus.CampusID" class="form-control" value="@Model.Campus.CampuseName" autocomplete="off" />
                <label for="editCampusName_@Model.Campus.CampusID">Campus Name</label>
                <span class="text-danger" data-fv-for="Campus.CampuseName"></span>
            </div>

            <!-- AffiliationNo -->
            <div class="form-floating form-floating-outline mb-5">
                <input type="text" name="Campus.AffiliationNo" id="editAffiliationNo_@Model.Campus.CampusID" class="form-control" value="@Model.Campus.AffiliationNo" autocomplete="off" />
                <label for="editAffiliationNo_@Model.Campus.CampusID">Affiliation No</label>
                <span class="text-danger" data-fv-for="Campus.AffiliationNo"></span>
            </div>

            <!-- SchoolCode -->
            <div class="form-floating form-floating-outline mb-5">
                <input type="text" name="Campus.SchoolCode" id="editSchoolCode_@Model.Campus.CampusID" class="form-control" value="@Model.Campus.SchoolCode" autocomplete="off" />
                <label for="editSchoolCode_@Model.Campus.CampusID">School Code</label>
                <span class="text-danger" data-fv-for="Campus.SchoolCode"></span>
            </div>

            <!-- CampusTypeID Dropdown -->
            <div class="form-floating form-floating-outline mb-5">
                <select name="Campus.CampusTypeID" id="editCampusTypeID_@Model.Campus.CampusID" class="form-select">
                    <option value="">Select a Campus Type</option>
                    @await Component.InvokeAsync("Master", new { viewname = "CampusTypes", SelectedIDs = Model.Campus.CampusTypeID })
                </select>
                <label for="editCampusTypeID_@Model.Campus.CampusID">Campus Type</label>
                <span class="text-danger" data-fv-for="Campus.CampusTypeID"></span>
            </div>

            <!-- PhoneNos -->
            <div class="form-floating form-floating-outline mb-5">
                <input type="text" name="Campus.PhoneNos" id="editPhoneNos_@Model.Campus.CampusID" class="form-control" value="@Model.Campus.PhoneNos" autocomplete="off" />
                <label for="editPhoneNos_@Model.Campus.CampusID">Phone Numbers</label>
                <span class="text-danger" data-fv-for="Campus.PhoneNos"></span>
            </div>

            <!-- Address -->
            <div class="form-floating form-floating-outline mb-5">
                <textarea name="Campus.Address" id="editAddress_@Model.Campus.CampusID" class="form-control" style="height: 100px;">@Model.Campus.Address</textarea>
                <label for="editAddress_@Model.Campus.CampusID">Address</label>
                <span class="text-danger" data-fv-for="Campus.Address"></span>
            </div>

            <!-- Locality -->
            <div class="form-floating form-floating-outline mb-5">
                <input type="text" name="Campus.Locality" id="editLocality_@Model.Campus.CampusID" class="form-control" value="@Model.Campus.Locality" autocomplete="off" />
                <label for="editLocality_@Model.Campus.CampusID">Locality</label>
                <span class="text-danger" data-fv-for="Campus.Locality"></span>
            </div>

            <!-- PinCode -->
            <div class="form-floating form-floating-outline mb-5">
                <input type="text" name="Campus.PinCode" id="editPinCode_@Model.Campus.CampusID" class="form-control" value="@Model.Campus.PinCode" autocomplete="off" />
                <label for="editPinCode_@Model.Campus.CampusID">Pin Code</label>
                <span class="text-danger" data-fv-for="Campus.PinCode"></span>
            </div>

            <!-- CountryID Dropdown -->
            <div class="form-floating form-floating-outline mb-5">
                <select name="Campus.CountryID" id="editCountryID_@Model.Campus.CampusID"  class="form-select">
                    <option value="">Select a Country</option>
                    @await Component.InvokeAsync("Master", new { viewname = "Countries", SelectedIDs = Model.Campus.CountryID })
                </select>
                <label for="editCountryID_@Model.Campus.CampusID">Country</label>
                <span class="text-danger" data-fv-for="Campus.CountryID"></span>
            </div>

            <!-- StateID Dropdown -->
            <div class="form-floating form-floating-outline mb-5">
                <select name="Campus.StateID" id="editStateID_@Model.Campus.CampusID" class="form-select">
                    <option value="">Select a State</option>
                    @if (Model.Campus.CountryID != 0)
                    {
                        @await Component.InvokeAsync("Master", new { viewname = "States", FilterIds = Model.Campus.CountryID.ToString(), SelectedIDs = Model.Campus.StateID })
                    }
                </select>
                <label for="editStateID_@Model.Campus.CampusID">State</label>
                <span class="text-danger" data-fv-for="Campus.StateID"></span>
            </div>

            <!-- CityID Dropdown -->
            <div class="form-floating form-floating-outline mb-5">
                <select name="Campus.CityID" id="editCityID_@Model.Campus.CampusID" class="form-select">
                    <option value="">Select a City</option>
                    @if (Model.Campus.StateID != 0)
                    {
                        var filterIds = $"{Model.Campus.CountryID},{Model.Campus.StateID}";
                        @await Component.InvokeAsync("Master", new { viewname = "Cities", FilterIds = filterIds, SelectedIDs = Model.Campus.CityID })
                    }
                </select>
                <label for="editCityID_@Model.Campus.CampusID">City</label>
                <span class="text-danger" data-fv-for="Campus.CityID"></span>
            </div>

            <!-- Buttons -->
            <div class="row">
                <div class="col-12">
                    <button type="submit" class="btn btn-primary me-3" data-id="@Model.Campus.CampusID">Save</button>
                    <button type="reset" class="btn btn-outline-secondary" data-bs-dismiss="offcanvas">Cancel</button>
                </div>
            </div>
        </form>
    </div>
</div>  *@