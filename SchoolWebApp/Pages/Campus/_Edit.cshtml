
@model SchoolWebApp.Pages.Campus.IndexModel


@if (Model == null || Model.CampusVM == null || Model.CampusVM.Campus == null)
{
    <div class="alert alert-danger">Unable to load campus data. Please try again.</div>
    return;
}

<div class="offcanvas-body mx-0 flex-grow-0">
    <form id="editCampusForm_@Model.CampusVM.Campus.CampusID" method="post" enctype="multipart/form-data" data-id="@Model.CampusVM.Campus.CampusID">
        @Html.AntiForgeryToken()
        <input type="hidden" name="CampusVM.Campus.CampusID" value="@Model.CampusVM.Campus.CampusID" />
        <input type="hidden" name="CampusVM.Campus.CGUID" value="@Model.CampusVM.Campus.CGUID" />
        <input type="hidden" name="CampusVM.Campus.CreatedDate" value="@Model.CampusVM.Campus.CreatedDate" />
        <input type="hidden" name="CampusVM.Campus.Status" value="@Model.CampusVM.Campus.Status" />

        <!-- InstitutionID Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            <select name="CampusVM.Campus.InstitutionID" id="editInstitutionID_@Model.CampusVM.Campus.CampusID" class="form-control" onchange="loadZones(this.value, @Model.CampusVM.Campus.CampusID)">
                @await Component.InvokeAsync("Master", new { viewname = "Institutions", SelectedIDs = Model.CampusVM.Campus.InstitutionID })
            </select>
            <label for="editInstitutionID_@Model.CampusVM.Campus.CampusID">Institution</label>
           
        </div>

        <!-- ZoneID Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            <select name="CampusVM.Campus.ZoneID" id="editZoneID_@Model.CampusVM.Campus.CampusID" class="form-control">
                @if (Model.CampusVM.Campus.InstitutionID != 0)
                {
                    @await Component.InvokeAsync("Master", new { viewname = "Zones", FilterIds = Model.CampusVM.Campus.InstitutionID.ToString(), SelectedIDs = Model.CampusVM.Campus.ZoneID })
                }
            </select>
            <label for="editZoneID_@Model.CampusVM.Campus.CampusID">Zone</label>
           
        </div>

        <!-- CampuseName -->
        <div class="form-floating form-floating-outline mb-5">
            <input type="text" name="CampusVM.Campus.CampuseName" id="editCampusName_@Model.CampusVM.Campus.CampusID" class="form-control" value="@Model.CampusVM.Campus.CampuseName" autocomplete="off" />
            <label for="editCampusName_@Model.CampusVM.Campus.CampusID">Campus Name</label>
            <span class="text-danger" data-fv-for="Campus.CampuseName"></span>
        </div>

        <!-- AffiliationNo -->
        <div class="form-floating form-floating-outline mb-5">
            <input type="text" name="CampusVM.Campus.AffiliationNo" id="editAffiliationNo_@Model.CampusVM.Campus.CampusID" class="form-control" value="@Model.CampusVM.Campus.AffiliationNo" autocomplete="off" />
            <label for="editAffiliationNo_@Model.CampusVM.Campus.CampusID">Affiliation No</label>
           
        </div>

        <!-- SchoolCode -->
        <div class="form-floating form-floating-outline mb-5">
            <input type="text" name="CampusVM.Campus.SchoolCode" id="editSchoolCode_@Model.CampusVM.Campus.CampusID" class="form-control" value="@Model.CampusVM.Campus.SchoolCode" autocomplete="off" />
            <label for="editSchoolCode_@Model.CampusVM.Campus.CampusID">School Code</label>
            
        </div>

        <!-- CampusTypeID Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            <select name="CampusVM.Campus.CampusTypeID" id="editCampusTypeID_@Model.CampusVM.Campus.CampusID" class="form-control">
                @await Component.InvokeAsync("Master", new { viewname = "CampusTypes", SelectedIDs = Model.CampusVM.Campus.CampusTypeID })
            </select>
            <label for="editCampusTypeID_@Model.CampusVM.Campus.CampusID">Campus Type</label>
            
        </div>

        <!-- BoardingTypeID Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            @* <p>Debug: CampusID: @Model.CampusVM.Campus.CampusID</p>
            <p>Debug: BoardingTypeIDs in _Edit.cshtml: @(Model.CampusVM?.BoardingTypeIDs != null && Model.CampusVM.BoardingTypeIDs.Any() ? string.Join(", ", Model.CampusVM.BoardingTypeIDs) : "None")</p> *@
            <select name="CampusVM.BoardingTypeIDs"
                    id="editBoardingTypeID_@Model.CampusVM.Campus.CampusID"
                 
                    class="form-control selectpicker"
                    multiple
                    data-selected-text-format="count > 2"
                    title="Select Boarding Types">
               
                @await Component.InvokeAsync("Master", new { viewname = "BoardingTypes", Selected = (Model.CampusVM?.BoardingTypeIDs ?? new List<int>()), SelectedIDs = (int?)null })
            </select>
            <label for="editBoardingTypeID_@Model.CampusVM.Campus.CampusID">Boarding Type</label>
           
        </div>

        @* <!-- BoardingTypeIDs Checkbox Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle text-start" type="button" id="boardingTypeDropdown_@Model.CampusVM.Campus.CampusID" data-bs-toggle="dropdown" aria-expanded="false">
                    Select Boarding Types
                </button>
                <ul class="dropdown-menu" aria-labelledby="boardingTypeDropdown_@Model.CampusVM.Campus.CampusID">
                    @await Component.InvokeAsync("Master", new { viewname = "BoardingTypes", Selected = (Model.CampusVM?.BoardingTypeIDs ?? new List<int>()), RenderMode = "checkboxes", CampusID = Model.CampusVM.Campus.CampusID })
                </ul>
            </div>
            <label for="boardingTypeDropdown_@Model.CampusVM.Campus.CampusID">Boarding Type</label>
            <div id="boardingTypeHiddenInputs_@Model.CampusVM.Campus.CampusID"></div>
            <span class="text-danger" data-fv-for="CampusVM.BoardingTypeIDs"></span>
        </div> *@
    

        <!-- PhoneNos -->
        <div class="form-floating form-floating-outline mb-5">
            <input type="text" name="CampusVM.Campus.PhoneNos" id="editPhoneNos_@Model.CampusVM.Campus.CampusID" class="form-control" value="@Model.CampusVM.Campus.PhoneNos" autocomplete="off" />
            <label for="editPhoneNos_@Model.CampusVM.Campus.CampusID">Phone Numbers</label>
            
        </div>

        <!-- Address -->
        <div class="form-floating form-floating-outline mb-5">
            <textarea name="CampusVM.Campus.Address" id="editAddress_@Model.CampusVM.Campus.CampusID" class="form-control" style="height: 100px;">@Model.CampusVM.Campus.Address</textarea>
            <label for="editAddress_@Model.CampusVM.Campus.CampusID">Address</label>
            
        </div>

        <!-- Locality -->
        <div class="form-floating form-floating-outline mb-5">
            <input type="text" name="CampusVM.Campus.Locality" id="editLocality_@Model.CampusVM.Campus.CampusID" class="form-control" value="@Model.CampusVM.Campus.Locality" autocomplete="off" />
            <label for="editLocality_@Model.CampusVM.Campus.CampusID">Locality</label>
            
        </div>

        <!-- CountryID Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            <select name="CampusVM.Campus.CountryID" id="editCountryID_@Model.CampusVM.Campus.CampusID" class="form-control" onchange="loadStates(this.value, @Model.CampusVM.Campus.CampusID)">
                @await Component.InvokeAsync("Master", new { viewname = "Countries", SelectedIDs = Model.CampusVM.Campus.CountryID })
            </select>
            <label for="editCountryID_@Model.CampusVM.Campus.CampusID">Country</label>
           
        </div>

        <!-- StateID Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            <select name="CampusVM.Campus.StateID" id="editStateID_@Model.CampusVM.Campus.CampusID" class="form-control" onchange="loadCities(this.value, @Model.CampusVM.Campus.CampusID)">
                @if (Model.CampusVM.Campus.CountryID != 0)
                {
                    @await Component.InvokeAsync("Master", new { viewname = "States", FilterIds = Model.CampusVM.Campus.CountryID.ToString(), SelectedIDs = Model.CampusVM.Campus.StateID })
                }
            </select>
            <label for="editStateID_@Model.CampusVM.Campus.CampusID">State</label>
           
        </div>

        <!-- CityID Dropdown -->
        <div class="form-floating form-floating-outline mb-5">
            <select name="CampusVM.Campus.CityID" id="editCityID_@Model.CampusVM.Campus.CampusID" class="form-control">
                @if (Model.CampusVM.Campus.StateID != 0)
                {
                    var filterIds = $"{Model.CampusVM.Campus.CountryID},{Model.CampusVM.Campus.StateID}";
                    @await Component.InvokeAsync("Master", new { viewname = "Cities", FilterIds = filterIds, SelectedIDs = Model.CampusVM.Campus.CityID })
                }
            </select>
            <label for="editCityID_@Model.CampusVM.Campus.CampusID">City</label>
           
        </div>

        <!-- PinCode -->
        <div class="form-floating form-floating-outline mb-5">
            <input type="text" name="CampusVM.Campus.PinCode" id="editPinCode_@Model.CampusVM.Campus.CampusID" class="form-control" value="@Model.CampusVM.Campus.PinCode" autocomplete="off" />
            <label for="editPinCode_@Model.CampusVM.Campus.CampusID">Pin Code</label>
            
        </div>


        <!-- Buttons -->
        <div class="row">
            <div class="col-12">
                <button type="submit" class="btn btn-primary me-3" id="submitEditCampusBtn_@Model.CampusVM.Campus.CampusID">Save</button>
                <button type="reset" class="btn btn-outline-secondary" data-bs-dismiss="offcanvas">Cancel</button>
            </div>
        </div>
    </form>
</div>

